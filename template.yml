AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31


Parameters:
  ProjectId:
    Type: String
    Description: CodeStar projectId used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  RDSSecretArn:
    Type: String
    Default: 'arn:aws:secretsmanager:us-east-2:316608166692:secret:nest-d0jhM5'
  RDSResourceArn:
    Type: String
    Default: 'arn:aws:rds:us-east-2:316608166692:cluster:nest'
  DatabaseName:
    Type: String
    Default: 'nest'
  Schema:
    Type: String
    Default: 'public'
  GMapsAPIKeySecretArn:
    Type: String
    Default: 'arn:aws:secretsmanager:us-east-2:316608166692:secret:gmaps_api_key-HDARJc'
  SQLUtilityLayer:
    Type: String
    Default: 'arn:aws:lambda:us-east-2:316608166692:layer:Unestify-SerializeDataAPIResponse:2'

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  # ==============================
  # Hello World Fxn (example)
  # ==============================
  HelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda_funcs
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-HelloWorld'
      Handler: index.handler
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-HelloWorld-Execution'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'

  # ======================================================
  #  ____            _                  _
  # / ___|___  _ __ | |_ _ __ __ _  ___| |_ ___  _ __ ___
  #| |   / _ \| '_ \| __| '__/ _` |/ __| __/ _ \| '__/ __|
  #| |__| (_) | | | | |_| | | (_| | (__| || (_) | |  \__ \
  # \____\___/|_| |_|\__|_|  \__,_|\___|\__\___/|_|  |___/
  # ======================================================
  # Get All Contractors
  # ======================================================
  GetContractorsAll:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_contractors.handler
      CodeUri: ./lambda_funcs
      Runtime: python3.7
      Layers:
        - !Ref SQLUtilityLayer
      Environment:
        Variables:
          DATABASE_SECRET_ARN: !Ref RDSSecretArn
          DATABASE_ARN: !Ref RDSResourceArn
          DATABASE_NAME: !Ref DatabaseName
          SCHEMA: !Ref Schema
          MAPS_API_KEY: !Ref GMapsAPIKeySecretArn
      Role:
        !GetAtt GetContractorsAllExecutionRole.Arn
      Events:
        GetContractorsAll:
          Type: Api
          Properties:
            Path: /contractors
            Method: get
  GetContractorsAllExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-GetContractorsAll-Execution'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - arn:aws:iam::316608166692:policy/Manual-Unestify-GetAndDecryptSecret
        - arn:aws:iam::316608166692:policy/Manual-Unestify-RDSDataAPI
        - arn:aws:iam::316608166692:policy/Manual-Unestify-LambdaGetLayerVersion
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'

  # ==============================
  # Get One Contractor
  # ==============================
  GetContractorsID:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_contractors_id.handler
      CodeUri: ./lambda_funcs
      Runtime: python3.7
      Layers:
        - !Ref SQLUtilityLayer
      Environment:
        Variables:
          DATABASE_SECRET_ARN: !Ref RDSSecretArn
          DATABASE_ARN: !Ref RDSResourceArn
          DATABASE_NAME: !Ref DatabaseName
          SCHEMA: !Ref Schema
          MAPS_API_KEY: !Ref GMapsAPIKeySecretArn
      Role:
        !GetAtt GetContractorsIDExecutionRole.Arn
      Events:
        GetContractorsID:
          Type: Api
          Properties:
            Path: /contractors/{id}
            Method: get
  GetContractorsIDExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-GetContractorsID-Execution'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - arn:aws:iam::316608166692:policy/Manual-Unestify-GetAndDecryptSecret
        - arn:aws:iam::316608166692:policy/Manual-Unestify-RDSDataAPI
        - arn:aws:iam::316608166692:policy/Manual-Unestify-LambdaGetLayerVersion
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'

  # ==============================
  # Create One Contractor
  # ==============================
  PostContractors:
    Type: AWS::Serverless::Function
    Properties:
      Handler: post_contractors.handler
      CodeUri: ./lambda_funcs
      Runtime: python3.7
      Layers:
        - !Ref SQLUtilityLayer
      Environment:
        Variables:
          DATABASE_SECRET_ARN: !Ref RDSSecretArn
          DATABASE_ARN: !Ref RDSResourceArn
          DATABASE_NAME: !Ref DatabaseName
          SCHEMA: !Ref Schema
          MAPS_API_KEY: !Ref GMapsAPIKeySecretArn
      Role:
        !GetAtt PostContractorsExecutionRole.Arn
      Events:
        PostContractors:
          Type: Api
          Properties:
            Path: /contractors
            Method: post
  PostContractorsExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-PostContractors-Execution'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - arn:aws:iam::316608166692:policy/Manual-Unestify-GetAndDecryptSecret
        - arn:aws:iam::316608166692:policy/Manual-Unestify-RDSDataAPI
        - arn:aws:iam::316608166692:policy/Manual-Unestify-LambdaGetLayerVersion
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'

  # ==============================
  # PUT (Update) One Contractor
  # ==============================
  PutContractorsID:
    Type: AWS::Serverless::Function
    Properties:
      Handler: put_contractors_id.handler
      CodeUri: ./lambda_funcs
      Runtime: python3.7
      Layers:
        - !Ref SQLUtilityLayer
      Environment:
        Variables:
          DATABASE_SECRET_ARN: !Ref RDSSecretArn
          DATABASE_ARN: !Ref RDSResourceArn
          DATABASE_NAME: !Ref DatabaseName
          SCHEMA: !Ref Schema
          MAPS_API_KEY: !Ref GMapsAPIKeySecretArn
      Role:
        !GetAtt PutContractorsExecutionRole.Arn
      Events:
        PostContractors:
          Type: Api
          Properties:
            Path: /contractors/{id}
            Method: put
  PutContractorsExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-PutContractors-Execution'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - arn:aws:iam::316608166692:policy/Manual-Unestify-GetAndDecryptSecret
        - arn:aws:iam::316608166692:policy/Manual-Unestify-RDSDataAPI
        - arn:aws:iam::316608166692:policy/Manual-Unestify-LambdaGetLayerVersion
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'

  # ==============================
  # Delete One Contractor
  # ==============================
  DeleteContractors:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete_contractors_id.handler
      CodeUri: ./lambda_funcs
      Runtime: python3.7
      Layers:
        - !Ref SQLUtilityLayer
      Environment:
        Variables:
          DATABASE_SECRET_ARN: !Ref RDSSecretArn
          DATABASE_ARN: !Ref RDSResourceArn
          DATABASE_NAME: !Ref DatabaseName
          SCHEMA: !Ref Schema
          MAPS_API_KEY: !Ref GMapsAPIKeySecretArn
      Role:
        !GetAtt DeleteContractorsExecutionRole.Arn
      Events:
        PostContractors:
          Type: Api
          Properties:
            Path: /contractors/{id}
            Method: delete
  DeleteContractorsExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-DeleteContractors-Execution'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - arn:aws:iam::316608166692:policy/Manual-Unestify-GetAndDecryptSecret
        - arn:aws:iam::316608166692:policy/Manual-Unestify-RDSDataAPI
        - arn:aws:iam::316608166692:policy/Manual-Unestify-LambdaGetLayerVersion
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
